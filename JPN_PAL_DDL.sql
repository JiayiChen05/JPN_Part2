CREATE DATABASE JPN_PAL;

USE JPN_PAL;

-- Create JPN_ROLE table to store the list of roles available in the system.
CREATE TABLE JPN_ROLE
(
  ROLE_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR ROLE',
  ROLE_NAME VARCHAR(20) NOT NULL COMMENT 'THE NAME OF ROLE'
);

ALTER TABLE JPN_ROLE
  ADD PRIMARY KEY (ROLE_ID);

ALTER TABLE JPN_ROLE
  ADD UNIQUE KEY uk_role_name (ROLE_NAME);
  
ALTER TABLE JPN_ROLE
  MODIFY ROLE_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE ROLE';

-- Create JPN_USER table to store user information.
CREATE TABLE JPN_USER
(
  U_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE USER', 
  U_FNAME VARCHAR(20) NOT NULL COMMENT 'THE FIRST NAME OF THE USER', 
  U_LNAME VARCHAR(20) COMMENT 'THE LAST NAME OF THE USER',
  U_PHONE VARCHAR(10) NOT NULL COMMENT 'THE PHONE NUMBER OF THE USER',
  U_EMAIL VARCHAR(40) NOT NULL COMMENT 'THE EMAIL ADDRESS OF THE USER',
  U_PWD_HASH VARBINARY(255) NOT NULL COMMENT 'PASSWORD HASH'
);

ALTER TABLE JPN_USER
  ADD PRIMARY KEY (U_ID);

ALTER TABLE JPN_USER
  ADD UNIQUE KEY uk_user_email (U_EMAIL);
  
ALTER TABLE JPN_USER
  MODIFY U_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE USER';
  
  
-- Create JPN_USER_ROLE table to map users to the roles they possess.
CREATE TABLE JPN_USER_ROLE
(
  U_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR USER',
  ROLE_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR ROLE'
);

ALTER TABLE JPN_USER_ROLE
  ADD PRIMARY KEY (U_ID, ROLE_ID);

ALTER TABLE JPN_USER_ROLE
  ADD CONSTRAINT fk_userrole_user
    FOREIGN KEY (U_ID) REFERENCES JPN_USER (U_ID);

ALTER TABLE JPN_USER_ROLE
  ADD CONSTRAINT fk_userrole_role
    FOREIGN KEY (ROLE_ID) REFERENCES JPN_ROLE (ROLE_ID);  
  

-- Create JPN_EMPLOYEE table to store employee information.
CREATE TABLE JPN_EMPLOYEE
(
  E_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR EMPLOYEE',
  E_HIREDATE DATE NOT NULL DEFAULT (CURRENT_DATE) COMMENT 'DATE THE EMPLOYEE WAS HIRED'
);

ALTER TABLE JPN_EMPLOYEE
  ADD PRIMARY KEY (E_ID);
  
ALTER TABLE JPN_EMPLOYEE
  ADD CONSTRAINT fk_employee_user
    FOREIGN KEY (E_ID) REFERENCES JPN_USER (U_ID);
	

-- Create JPN_CUSTOMER table to store customer information including contact and identification details.
CREATE TABLE JPN_CUSTOMER 
( 
  CUST_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR CUSTOMER',
  CUST_UID_TYPE VARCHAR(15) NOT NULL COMMENT 'THE IDENTIFICATION TYPE OF CUSTOMER', 
  CUST_UID_NO VARCHAR(20) NOT NULL COMMENT 'THE IDENTIFICATION NUMBER OF CUSTOMER' 
);

ALTER TABLE JPN_CUSTOMER 
  ADD PRIMARY KEY (CUST_ID);
  
ALTER TABLE JPN_CUSTOMER
  ADD CONSTRAINT fk_customer_user
    FOREIGN KEY (CUST_ID) REFERENCES JPN_USER (U_ID);
	

-- Create JPN_AUTHOR table to store author details including name, address, and email.
CREATE TABLE JPN_AUTHOR 
( 
  A_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE AUTHOR',
  A_STREET VARCHAR(20) NOT NULL COMMENT 'THE STREET OF AUTHOR ADDRESS', 
  A_CITY VARCHAR(20) NOT NULL COMMENT 'THE CITY OF AUTHOR ADDRESS', 
  A_STATE VARCHAR(2) NOT NULL COMMENT 'THE STATE OF AUTHOR ADDRESS', 
  A_COUNTRY VARCHAR(30) NOT NULL COMMENT 'COUNTRY OF THE AUTHOR', 
  A_ZIPCODE VARCHAR(5)  NOT NULL COMMENT 'THE ZIPCODE OF AUTHOR ADDRESS'
);

ALTER TABLE JPN_AUTHOR 
  ADD PRIMARY KEY (A_ID);
  
ALTER TABLE JPN_AUTHOR
  ADD CONSTRAINT fk_author_user
    FOREIGN KEY (A_ID) REFERENCES JPN_USER (U_ID);


-- Create JPN_AUTHOR_SEMINAR table to map authors to seminars via invitations.
CREATE TABLE JPN_AUTHOR_SEMINAR 
( 
  INVITATION_ID BIGINT NOT NULL COMMENT 'UNIQUE INVITATION ID FOR THE SEMINAR FOR THE AUTHORS', 
  A_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_AUTHOR', 
  E_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_SEMINAR' 
);

ALTER TABLE JPN_AUTHOR_SEMINAR 
  ADD PRIMARY KEY (INVITATION_ID);
  
ALTER TABLE JPN_AUTHOR_SEMINAR
	MODIFY INVITATION_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE INVITATION ID FOR THE SEMINAR FOR THE AUTHORS';

-- Create JPN_BOOK table to store book records with titles and associated topics.
CREATE TABLE JPN_BOOK 
( 
  BOOK_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE BOOK', 
  BOOK_NAME VARCHAR(30) NOT NULL COMMENT 'THE NAME OF BOOK', 
  T_ID INT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_TOPIC' 
);

ALTER TABLE JPN_BOOK 
  ADD PRIMARY KEY (BOOK_ID);

ALTER TABLE JPN_BOOK 
  MODIFY BOOK_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE BOOK';

-- Create JPN_BOOK_AUTHOR table to map books with their authors.
CREATE TABLE JPN_BOOK_AUTHOR 
( 
  BOOK_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_BOOK', 
  A_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_AUTHOR' 
);

ALTER TABLE JPN_BOOK_AUTHOR 
  ADD PRIMARY KEY (A_ID, BOOK_ID);

-- Create JPN_CARD table to store card payment details.
CREATE TABLE JPN_CARD 
( 
  PAY_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE PAYMENT', 
  CARD_HOLDER_NAME VARCHAR(20) NOT NULL COMMENT 'CARDHOLDER NAME IS A SINGLE ENTITY', 
  CARD_NUMBER VARCHAR(20) NOT NULL COMMENT 'THIS REPRESENTS THE CARD NUMBER.', 
  CARD_TYPE VARCHAR(6) NOT NULL COMMENT 'TYPE OF THE CARD' 
);

ALTER TABLE JPN_CARD 
  ADD PRIMARY KEY (PAY_ID);

-- Create JPN_COPIES table to track copies of books and their availability.
CREATE TABLE JPN_COPIES 
( 
  COPY_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE COPY OF THE BOOK', 
  COPY_STATUS VARCHAR(14) NOT NULL COMMENT 'STATUS OF THE COPY', 
  BOOK_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_BOOK' 
);

ALTER TABLE JPN_COPIES 
  ADD PRIMARY KEY (COPY_ID);

ALTER TABLE JPN_COPIES 
  MODIFY COPY_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE COPY OF THE BOOK';

-- Create JPN_EVENT table to store event details such as name, time, type, and topic.
CREATE TABLE JPN_EVENT 
( 
  E_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE EVENT', 
  E_NAME VARCHAR(30) NOT NULL COMMENT 'THE NAME OF EVENT', 
  E_STARTTIME DATETIME NOT NULL COMMENT 'THE START DATETIME OF EVENT', 
  E_ENDTIME DATETIME NOT NULL COMMENT 'THE END DATETIME OF EVENT', 
  E_TYPE VARCHAR(1) NOT NULL COMMENT 'THE TYPE OF EVENT', 
  T_ID INT NOT NULL COMMENT 'TOPIC ID FOR THE EVENT' 
);

ALTER TABLE JPN_EVENT 
  ADD CONSTRAINT CH_INH_JPN_EVENT 
  CHECK (E_TYPE IN ('E', 'S'));

ALTER TABLE JPN_EVENT 
  ADD PRIMARY KEY (E_ID);

ALTER TABLE JPN_EVENT 
  MODIFY E_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE EVENT';

-- Create JPN_CUSTOMER_EXHIBITION table to track customer registrations for exhibitions.
CREATE TABLE JPN_CUSTOMER_EXHIBITION 
( 
  REGISTRATION_ID BIGINT NOT NULL COMMENT 'UNIQUE ID FOR THE REGISTRATION OF THE EVENT', 
  CUST_ID BIGINT NOT NULL COMMENT 'CUSTOMER ID FOR THE EXHIBITION REGISTRATION', 
  E_ID BIGINT NOT NULL COMMENT 'EVENT ID FOR THE EXHIBITION' 
);

ALTER TABLE JPN_CUSTOMER_EXHIBITION 
  ADD PRIMARY KEY (REGISTRATION_ID);

ALTER TABLE JPN_CUSTOMER_EXHIBITION 
  MODIFY REGISTRATION_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE ID FOR THE REGISTRATION OF THE EVENT';

-- Create JPN_EXHIBITION table to record exhibition events and their expenses.
CREATE TABLE JPN_EXHIBITION 
( 
  E_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE EVENT', 
  EXPENSE DECIMAL(8,2) NOT NULL COMMENT 'THE EXPENSES OF EACH EXIBITION' 
);

ALTER TABLE JPN_EXHIBITION 
  ADD PRIMARY KEY (E_ID);

-- Create JPN_INVOICE table to manage invoices for rental transactions.
CREATE TABLE JPN_INVOICE 
( 
  INV_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE INVOICE', 
  INV_DATE DATETIME NOT NULL COMMENT 'THIS IS THE DATE OF INVOICE', 
  INV_AMOUNT DECIMAL(8,2) NOT NULL COMMENT 'THIS IS THE INVOICE AMOUNT.', 
  R_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_RENTAL' 
);

ALTER TABLE JPN_INVOICE 
  ADD PRIMARY KEY (INV_ID);

ALTER TABLE JPN_INVOICE 
  MODIFY INV_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE INVOICE';

-- Create JPN_PAYMENT table to record payment transactions linked to invoices.
CREATE TABLE JPN_PAYMENT 
( 
  PAY_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE PAYMENT', 
  PAY_DATE DATETIME NOT NULL COMMENT 'THIS IS THE DATE OF PAYMENT', 
  PAY_AMOUNT DECIMAL(8,2) NOT NULL COMMENT 'THIS IS THE AMOUNT TO BE PAID.', 
  PAY_METHOD VARCHAR(6) NOT NULL COMMENT 'METHOD OF PAYMENT FOR THIS TRANSACTION', 
  INV_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_INVOICE' 
);

ALTER TABLE JPN_PAYMENT 
  ADD CONSTRAINT CH_INH_JPN_PAYMENT 
  CHECK (PAY_METHOD IN ('CARD', 'CASH', 'PAYPAL'));

ALTER TABLE JPN_PAYMENT 
  ADD PRIMARY KEY (PAY_ID);

ALTER TABLE JPN_PAYMENT 
  MODIFY PAY_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE PAYMENT';

-- Create JPN_PAYPAL table to store PayPal-specific payment information.
CREATE TABLE JPN_PAYPAL 
( 
  PAY_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE PAYMENT', 
  PAYPAL_ID VARCHAR(40) NOT NULL COMMENT 'THIS IS THE PAYPAL NUMBER USED.' 
);

ALTER TABLE JPN_PAYPAL 
  ADD PRIMARY KEY (PAY_ID);

-- Create JPN_RENTAL table to track rental transactions for book copies by customers.
CREATE TABLE JPN_RENTAL 
( 
  R_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE RENTALS', 
  R_STATUS VARCHAR(20) NOT NULL COMMENT 'THIS IS THE RENTAL STATUS OF THE BOOK', 
  R_BORROWDATE DATETIME NOT NULL COMMENT 'THIS IS THE BORROWED DATE.', 
  R_EX_RETURNDATE DATETIME NOT NULL COMMENT 'EXPECTED RETURN DATE OF THE BOOK', 
  R_AC_RETURNDATE DATETIME COMMENT 'THIS IS THE ACTUAL RETURN DATE IF THE BOOK', 
  CUST_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_CUSTOMER', 
  COPY_ID BIGINT NOT NULL COMMENT 'FOREIGN KEY FROM JPN_COPIES' 
);

ALTER TABLE JPN_RENTAL 
  ADD PRIMARY KEY (R_ID);

ALTER TABLE JPN_RENTAL 
  MODIFY R_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE RENTALS';
  
ALTER TABLE JPN_RENTAL
  MODIFY R_AC_RETURNDATE DATETIME NULL DEFAULT NULL COMMENT 'THIS IS THE ACTUAL RETURN DATE IF THE BOOK';

-- Create JPN_RESERVATION table to manage reservations for study sessions or room bookings.
CREATE TABLE JPN_RESERVATION 
( 
  RES_ID BIGINT NOT NULL COMMENT 'UNIQUE RESERVATION NUMBER', 
  RES_STARTTIME DATETIME NOT NULL COMMENT 'THIS IS THE START TIME OF THE SESSION', 
  RES_ENDTIME DATETIME NOT NULL COMMENT 'THIS IS THE END TIME OF THE SESSION.', 
  RES_DESC VARCHAR(30) NOT NULL COMMENT 'THIS IS A BRIEF DESCRIPTION OF THE STUDY.', 
  RES_COUNT INT NOT NULL COMMENT 'THIS IS THE NUMBER OF THE INDIVIDUALS IN THE GROUP.', 
  CUST_ID BIGINT NOT NULL COMMENT 'CUSTOMER ID FOR THE RESERVATION', 
  ROOM_ID INT NOT NULL COMMENT 'ROOM ID FOR THE RESERVATION' 
);

ALTER TABLE JPN_RESERVATION 
  ADD PRIMARY KEY (RES_ID);

ALTER TABLE JPN_RESERVATION 
  MODIFY RES_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE RESERVATION NUMBER';

-- Create JPN_ROOM table to store room information including capacity.
CREATE TABLE JPN_ROOM 
( 
  ROOM_ID INT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE ROOM', 
  ROOM_CAPACITY INT NOT NULL COMMENT 'CAPACITY OF THE ROOM' 
);

ALTER TABLE JPN_ROOM 
  ADD PRIMARY KEY (ROOM_ID);

-- Create JPN_SEMINAR table to capture seminar details including speaker names.
CREATE TABLE JPN_SEMINAR 
( 
  E_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE EVENT', 
  SPEAKER_FNAME VARCHAR(20) NOT NULL COMMENT 'THIS IS THE FIRST NAME OF SPEAKER FOR THE SEMINAR.', 
  SPEAKER_LNAME VARCHAR(20) COMMENT 'THIS IS THE LAST NAME OF THE SPEAKER FOR THE SEMINAR.' 
);

ALTER TABLE JPN_SEMINAR 
  ADD PRIMARY KEY (E_ID);

-- Create JPN_SPONSOR table to store sponsor details and type.
CREATE TABLE JPN_SPONSOR 
( 
  SP_ID BIGINT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR THE SPONSOR', 
  SP_FNAME VARCHAR(20) NOT NULL COMMENT 'FIRST NAME OF THE SPONSOR', 
  SP_LNAME VARCHAR(20) COMMENT 'LAST NAME OF THE SPONSOR', 
  SP_TYPE VARCHAR(1) NOT NULL COMMENT 'TYPE OF THE SPONSOR' 
);

ALTER TABLE JPN_SPONSOR 
  ADD PRIMARY KEY (SP_ID);

ALTER TABLE JPN_SPONSOR 
  MODIFY SP_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR THE SPONSOR';

-- Create JPN_SPONSOR_SEMINAR table to map sponsors to seminars with contribution amounts.
CREATE TABLE JPN_SPONSOR_SEMINAR 
( 
  E_ID BIGINT NOT NULL COMMENT 'EVENT ID FOR WHICH SPONSOR HAS SUPPORTED', 
  SP_ID BIGINT NOT NULL COMMENT 'ID OF THE SPONSOR WHO IS SUPPORTING THE EVENT', 
  AMOUNT DECIMAL(8,2) NOT NULL COMMENT 'THE CONTRIBUTION AMOUNT PROVIDED BY EACH SPONSOR FOR EVERY SEMINAR.' 
);

ALTER TABLE JPN_SPONSOR_SEMINAR 
  ADD PRIMARY KEY (SP_ID, E_ID);

-- Create JPN_TOPIC table to store topic classifications for books and events.
CREATE TABLE JPN_TOPIC 
( 
  T_ID INT NOT NULL COMMENT 'UNIQUE IDENTIFIER FOR TOPIC', 
  T_NAME VARCHAR(20) NOT NULL COMMENT 'THE NAME OF TOPIC' 
);

ALTER TABLE JPN_TOPIC 
  ADD PRIMARY KEY (T_ID);

ALTER TABLE JPN_TOPIC 
  MODIFY T_ID INT NOT NULL AUTO_INCREMENT COMMENT 'UNIQUE IDENTIFIER FOR TOPIC';

-- Add foreign key constraints to enforce relationships between tables.
ALTER TABLE JPN_BOOK_AUTHOR 
  ADD CONSTRAINT JPN_AUTHOR_BOOK_FK 
  FOREIGN KEY (BOOK_ID) REFERENCES JPN_BOOK (BOOK_ID);

ALTER TABLE JPN_AUTHOR_SEMINAR 
  ADD CONSTRAINT JPN_AUTHOR_SEMINAR_FK 
  FOREIGN KEY (A_ID) REFERENCES JPN_AUTHOR (A_ID);

ALTER TABLE JPN_BOOK_AUTHOR 
  ADD CONSTRAINT JPN_BOOK_AUTHOR_FK 
  FOREIGN KEY (A_ID) REFERENCES JPN_AUTHOR (A_ID);

ALTER TABLE JPN_BOOK 
  ADD CONSTRAINT JPN_BOOK_JPN_TOPIC_FK 
  FOREIGN KEY (T_ID) REFERENCES JPN_TOPIC (T_ID);

ALTER TABLE JPN_CARD 
  ADD CONSTRAINT JPN_CARD_JPN_PAYMENT_FK 
  FOREIGN KEY (PAY_ID) REFERENCES JPN_PAYMENT (PAY_ID);

ALTER TABLE JPN_COPIES 
  ADD CONSTRAINT JPN_COPIES_JPN_BOOK_FK 
  FOREIGN KEY (BOOK_ID) REFERENCES JPN_BOOK (BOOK_ID);

ALTER TABLE JPN_CUSTOMER_EXHIBITION 
  ADD CONSTRAINT JPN_CUSTOMER_EXHIBITION_FK 
  FOREIGN KEY (CUST_ID) REFERENCES JPN_CUSTOMER (CUST_ID);

ALTER TABLE JPN_EVENT 
  ADD CONSTRAINT JPN_EVENT_JPN_TOPIC_FK 
  FOREIGN KEY (T_ID) REFERENCES JPN_TOPIC (T_ID);

ALTER TABLE JPN_CUSTOMER_EXHIBITION 
  ADD CONSTRAINT JPN_EXHIBITION_CUSTOMER_FK 
  FOREIGN KEY (E_ID) REFERENCES JPN_EXHIBITION (E_ID);

ALTER TABLE JPN_EXHIBITION 
  ADD CONSTRAINT JPN_EXHIBITION_JPN_EVENT_FK 
  FOREIGN KEY (E_ID) REFERENCES JPN_EVENT (E_ID);

ALTER TABLE JPN_INVOICE 
  ADD CONSTRAINT JPN_INVOICE_JPN_RENTAL_FK 
  FOREIGN KEY (R_ID) REFERENCES JPN_RENTAL (R_ID);

ALTER TABLE JPN_PAYMENT 
  ADD CONSTRAINT JPN_PAYMENT_JPN_INVOICE_FK 
  FOREIGN KEY (INV_ID) REFERENCES JPN_INVOICE (INV_ID);

ALTER TABLE JPN_PAYPAL 
  ADD CONSTRAINT JPN_PAYPAL_JPN_PAYMENT_FK 
  FOREIGN KEY (PAY_ID) REFERENCES JPN_PAYMENT (PAY_ID);

ALTER TABLE JPN_RENTAL 
  ADD CONSTRAINT JPN_RENTAL_JPN_COPIES_FK 
  FOREIGN KEY (COPY_ID) REFERENCES JPN_COPIES (COPY_ID);

ALTER TABLE JPN_RENTAL 
  ADD CONSTRAINT JPN_RENTAL_JPN_CUSTOMER_FK 
  FOREIGN KEY (CUST_ID) REFERENCES JPN_CUSTOMER (CUST_ID);

ALTER TABLE JPN_RESERVATION 
  ADD CONSTRAINT JPN_RES_CUST_FK 
  FOREIGN KEY (CUST_ID) REFERENCES JPN_CUSTOMER (CUST_ID);

ALTER TABLE JPN_RESERVATION 
  ADD CONSTRAINT JPN_RES_ROOM_FK 
  FOREIGN KEY (ROOM_ID) REFERENCES JPN_ROOM (ROOM_ID);

ALTER TABLE JPN_AUTHOR_SEMINAR 
  ADD CONSTRAINT JPN_SEMINAR_AUTHOR_FK 
  FOREIGN KEY (E_ID) REFERENCES JPN_SEMINAR (E_ID);

ALTER TABLE JPN_SEMINAR 
  ADD CONSTRAINT JPN_SEMINAR_JPN_EVENT_FK 
  FOREIGN KEY (E_ID) REFERENCES JPN_EVENT (E_ID);

ALTER TABLE JPN_SPONSOR_SEMINAR 
  ADD CONSTRAINT JPN_SEMINAR_SPONSOR_FK 
  FOREIGN KEY (E_ID) REFERENCES JPN_SEMINAR (E_ID);

ALTER TABLE JPN_SPONSOR_SEMINAR 
  ADD CONSTRAINT JPN_SPONSOR_SEMINAR_FK 
  FOREIGN KEY (SP_ID) REFERENCES JPN_SPONSOR (SP_ID);

-- TRIGGER ARC_FKArc_1_JPN_SEMINAR_BEFORE_INSERT

DELIMITER //

CREATE TRIGGER ARC_FKArc_1_JPN_SEMINAR_BEFORE_INSERT
BEFORE INSERT ON JPN_SEMINAR
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(1); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.E_TYPE INTO d 
    FROM JPN_EVENT A 
    WHERE A.E_ID = NEW.E_ID; 

    IF (d IS NULL OR d <> 'S') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_SEMINAR_JPN_EVENT_FK in Table JPN_SEMINAR violates Arc constraint on Table JPN_EVENT - discriminator column E_TYPE doesn''t have value ''S'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_1_JPN_SEMINAR_BEFORE_UPDATE

DELIMITER //

CREATE TRIGGER ARC_FKArc_1_JPN_SEMINAR_BEFORE_UPDATE
BEFORE UPDATE ON JPN_SEMINAR
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(1); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.E_TYPE INTO d 
    FROM JPN_EVENT A 
    WHERE A.E_ID = NEW.E_ID; 

    IF (d IS NULL OR d <> 'S') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_SEMINAR_JPN_EVENT_FK in Table JPN_SEMINAR violates Arc constraint on Table JPN_EVENT - discriminator column E_TYPE doesn''t have value ''S'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_1_JPN_EXHIBITION_BEFORE_INSERT

DELIMITER //

CREATE TRIGGER ARC_FKArc_1_JPN_EXHIBITION_BEFORE_INSERT
BEFORE INSERT ON JPN_EXHIBITION
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(1); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.E_TYPE INTO d 
    FROM JPN_EVENT A 
    WHERE A.E_ID = NEW.E_ID; 

    IF (d IS NULL OR d <> 'E') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_EXHI_EVENT_FK in Table JPN_EXHIBITION violates Arc constraint on Table JPN_EVENT - discriminator column E_TYPE doesn''t have value ''E'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_1_JPN_EXHIBITION_BEFORE_UPDATE

DELIMITER //

CREATE TRIGGER ARC_FKArc_1_JPN_EXHIBITION_BEFORE_UPDATE
BEFORE UPDATE ON JPN_EXHIBITION
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(1); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.E_TYPE INTO d 
    FROM JPN_EVENT A 
    WHERE A.E_ID = NEW.E_ID; 

    IF (d IS NULL OR d <> 'E') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_EXHI_EVENT_FK in Table JPN_EXHIBITION violates Arc constraint on Table JPN_EVENT - discriminator column E_TYPE doesn''t have value ''E'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_2_JPN_PAYPAL_BEFORE_INSERT

DELIMITER //

CREATE TRIGGER ARC_FKArc_2_JPN_PAYPAL_BEFORE_INSERT
BEFORE INSERT ON JPN_PAYPAL
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(6); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.PAY_METHOD INTO d 
    FROM JPN_PAYMENT A 
    WHERE A.PAY_ID = NEW.PAY_ID; 

    IF (d IS NULL OR d <> 'PAYPAL') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_PAYPAL_JPN_PAYMENT_FK in Table JPN_PAYPAL violates Arc constraint on Table JPN_PAYMENT - discriminator column PAY_METHOD doesn''t have value ''PAYPAL'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_2_JPN_PAYPAL_BEFORE_UPDATE

DELIMITER //

CREATE TRIGGER ARC_FKArc_2_JPN_PAYPAL_BEFORE_UPDATE
BEFORE UPDATE ON JPN_PAYPAL
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(6); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.PAY_METHOD INTO d 
    FROM JPN_PAYMENT A 
    WHERE A.PAY_ID = NEW.PAY_ID; 

    IF (d IS NULL OR d <> 'PAYPAL') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_PAYPAL_JPN_PAYMENT_FK in Table JPN_PAYPAL violates Arc constraint on Table JPN_PAYMENT - discriminator column PAY_METHOD doesn''t have value ''PAYPAL'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_2_JPN_CARD_BEFORE_INSERT

DELIMITER //

CREATE TRIGGER ARC_FKArc_2_JPN_CARD_BEFORE_INSERT
BEFORE INSERT ON JPN_CARD
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(6); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.PAY_METHOD INTO d 
    FROM JPN_PAYMENT A 
    WHERE A.PAY_ID = NEW.PAY_ID; 

    IF (d IS NULL OR d <> 'CARD') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_CARD_JPN_PAYMENT_FK in Table JPN_CARD violates Arc constraint on Table JPN_PAYMENT - discriminator column PAY_METHOD doesn''t have value ''CARD'''; 
    END IF; 
END;
//

DELIMITER ;

-- TRIGGER ARC_FKArc_2_JPN_CARD_BEFORE_UPDATE

DELIMITER //

CREATE TRIGGER ARC_FKArc_2_JPN_CARD_BEFORE_UPDATE
BEFORE UPDATE ON JPN_CARD
FOR EACH ROW 
BEGIN 
    DECLARE d VARCHAR(6); 

    DECLARE EXIT HANDLER FOR NOT FOUND 
    BEGIN 
        SET d = NULL; 
    END; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN 
        RESIGNAL; 
    END;

    SELECT A.PAY_METHOD INTO d 
    FROM JPN_PAYMENT A 
    WHERE A.PAY_ID = NEW.PAY_ID; 

    IF (d IS NULL OR d <> 'CARD') THEN 
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'FK JPN_CARD_JPN_PAYMENT_FK in Table JPN_CARD violates Arc constraint on Table JPN_PAYMENT - discriminator column PAY_METHOD doesn''t have value ''CARD'''; 
    END IF; 
END;
//

DELIMITER ;

-- Set delimiter for trigger TU_JPN_RENTAL_GENERATE_INVOICE definition.

DELIMITER //

CREATE TRIGGER TU_JPN_RENTAL_GENERATE_INVOICE
AFTER UPDATE ON JPN_RENTAL
FOR EACH ROW
BEGIN
    DECLARE invoiceCount INT DEFAULT 0;
    DECLARE invoiceAmount DECIMAL(8,2);

    IF NEW.R_AC_RETURNDATE IS NOT NULL AND OLD.R_AC_RETURNDATE IS NULL THEN
        SELECT COUNT(*) INTO invoiceCount
        FROM JPN_INVOICE
        WHERE R_ID = NEW.R_ID;

        IF invoiceCount = 0 THEN
            IF NEW.R_AC_RETURNDATE <= NEW.R_EX_RETURNDATE THEN
                SET invoiceAmount = (0.2) + DATEDIFF(NEW.R_AC_RETURNDATE, NEW.R_BORROWDATE) * 0.2;
            ELSE
                SET invoiceAmount = (0.2) +
                    (DATEDIFF(NEW.R_EX_RETURNDATE, NEW.R_BORROWDATE) * 0.2) +
                    (DATEDIFF(NEW.R_AC_RETURNDATE, NEW.R_EX_RETURNDATE) * 0.4);
            END IF;

            INSERT INTO JPN_INVOICE (INV_DATE, INV_AMOUNT, R_ID)
            VALUES (NOW(), invoiceAmount, NEW.R_ID);
        END IF;
    END IF;
END;
//

DELIMITER ;

-- Add check constraint to ensure valid rental statuses in JPN_RENTAL.

-- Rental status can only have 3 values: Borrowed, Returned or Late
ALTER TABLE JPN_RENTAL
  ADD CONSTRAINT CK_JPN_RENTAL_STATUS
  CHECK (R_STATUS IN ('BORROWED', 'RETURNED', 'LATE'));

-- Identification type of Customer can only be of 3 types: SSN, Passport or Drivers License
ALTER TABLE JPN_CUSTOMER
  ADD CONSTRAINT CK_JPN_CUSTOMER_UIDTYPE
  CHECK (CUST_UID_TYPE IN ('PASSPORT', 'SSN', 'DRIVER LICENSE'));

-- Sponsor can be individual or organization
ALTER TABLE JPN_SPONSOR
  ADD CONSTRAINT CK_JPN_SPONSOR_TYPE
  CHECK (SP_TYPE IN ('I', 'O'));

-- Copy of the book can have only 2 statuses
ALTER TABLE JPN_COPIES
  ADD CONSTRAINT CK_JPN_COPIES_STATUS
  CHECK (COPY_STATUS IN ('AVAILABLE', 'NOT AVAILABLE'));

-- Card can be either Debit or Credit
ALTER TABLE JPN_CARD
  ADD CONSTRAINT CK_JPN_CARD_TYPE
  CHECK (CARD_TYPE IN ('CREDIT', 'DEBIT'));

-- Room number is 3 digit only (Floor number + Room on that floor)
ALTER TABLE JPN_ROOM 
  ADD CONSTRAINT CK_JPN_ROOM_ID_RANGE 
  CHECK (ROOM_ID BETWEEN 100 AND 999);

-- Payment can't be negative
ALTER TABLE JPN_PAYMENT
  ADD CONSTRAINT CK_JPN_PAYMENT_PAYAMT
  CHECK (PAY_AMOUNT > 0);
  
-- Phone number should be 10 digits and should be numeric only
ALTER TABLE JPN_USER
  ADD CONSTRAINT CK_JPN_USER_PHONE
  CHECK (
    LENGTH(U_PHONE) = 10 AND
    U_PHONE = CAST(U_PHONE AS UNSIGNED)
  );
  
-- Created stored procedure SP_INSERT_JPN_SEMINAR_EVENT to handle seminar event insertion.

DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_SEMINAR_EVENT (
  IN P_E_NAME VARCHAR(30),
  IN P_E_STARTTIME DATETIME,
  IN P_E_ENDTIME DATETIME,
  IN P_T_ID INT,
  IN P_SPEAKER_FNAME VARCHAR(20),
  IN P_SPEAKER_LNAME VARCHAR(20)
)
BEGIN
  DECLARE NEW_E_ID BIGINT;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'INSERT FAILED IN SEMINAR FLOW. TRANSACTION ROLLED BACK.';
  END;

  START TRANSACTION;

  INSERT INTO JPN_EVENT (E_NAME, E_STARTTIME, E_ENDTIME, E_TYPE, T_ID)
  VALUES (P_E_NAME, P_E_STARTTIME, P_E_ENDTIME, 'S', P_T_ID);

  SET NEW_E_ID = LAST_INSERT_ID();

  INSERT INTO JPN_SEMINAR (E_ID, SPEAKER_FNAME, SPEAKER_LNAME)
  VALUES (NEW_E_ID, P_SPEAKER_FNAME, P_SPEAKER_LNAME);

  COMMIT;
END;
//

DELIMITER ;

-- Created stored procedure SP_INSERT_JPN_EXHIBITION_EVENT to handle exhibition event insertion.

DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_EXHIBITION_EVENT (
  IN P_E_NAME VARCHAR(30),
  IN P_E_STARTTIME DATETIME,
  IN P_E_ENDTIME DATETIME,
  IN P_T_ID INT,
  IN P_EXPENSE DECIMAL(8,2)
)
BEGIN
  DECLARE NEW_E_ID BIGINT;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'INSERT FAILED IN EXHIBITION FLOW. TRANSACTION ROLLED BACK.';
  END;

  START TRANSACTION;

  INSERT INTO JPN_EVENT (E_NAME, E_STARTTIME, E_ENDTIME, E_TYPE, T_ID)
  VALUES (P_E_NAME, P_E_STARTTIME, P_E_ENDTIME, 'E', P_T_ID);

  SET NEW_E_ID = LAST_INSERT_ID();

  INSERT INTO JPN_EXHIBITION (E_ID, EXPENSE)
  VALUES (NEW_E_ID, P_EXPENSE);

  COMMIT;
END;
//

DELIMITER ;

-- Created stored procedure SP_INSERT_JPN_PAYMENT_CARD for processing card payments.

DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_PAYMENT_CARD (
  IN P_INV_ID BIGINT,
  IN P_PAY_DATE DATETIME,
  IN P_PAY_AMOUNT DECIMAL(8,2),
  IN P_CARD_HOLDER_NAME VARCHAR(20),
  IN P_CARD_NUMBER VARCHAR(20),
  IN P_CARD_TYPE VARCHAR(6)
)
BEGIN
  DECLARE NEW_PAY_ID BIGINT;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'INSERT FAILED IN CARD PAYMENT FLOW. TRANSACTION ROLLED BACK.';
  END;

  START TRANSACTION;

  INSERT INTO JPN_PAYMENT (PAY_DATE, PAY_AMOUNT, PAY_METHOD, INV_ID)
  VALUES (P_PAY_DATE, P_PAY_AMOUNT, 'CARD', P_INV_ID);

  SET NEW_PAY_ID = LAST_INSERT_ID();

  INSERT INTO JPN_CARD (PAY_ID, CARD_HOLDER_NAME, CARD_NUMBER, CARD_TYPE)
  VALUES (NEW_PAY_ID, P_CARD_HOLDER_NAME, P_CARD_NUMBER, P_CARD_TYPE);

  COMMIT;
END;
//

DELIMITER ;

-- Created stored procedure SP_INSERT_JPN_PAYMENT_CASH for processing cash payments.

DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_PAYMENT_CASH (
  IN P_INV_ID BIGINT,
  IN P_PAY_DATE DATETIME,
  IN P_PAY_AMOUNT DECIMAL(8,2)
)
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'INSERT FAILED IN CASH PAYMENT FLOW. TRANSACTION ROLLED BACK.';
  END;

  START TRANSACTION;

  INSERT INTO JPN_PAYMENT (PAY_DATE, PAY_AMOUNT, PAY_METHOD, INV_ID)
  VALUES (P_PAY_DATE, P_PAY_AMOUNT, 'CASH', P_INV_ID);

  COMMIT;
END;
//

DELIMITER ;

-- Created stored procedure SP_INSERT_JPN_PAYMENT_PAYPAL for processing PayPal payments.

DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_PAYMENT_PAYPAL (
  IN P_INV_ID BIGINT,
  IN P_PAY_DATE DATETIME,
  IN P_PAY_AMOUNT DECIMAL(8,2),
  IN P_PAYPAL_ID VARCHAR(40)
)
BEGIN
  DECLARE NEW_PAY_ID BIGINT;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'INSERT FAILED IN PAYPAL PAYMENT FLOW. TRANSACTION ROLLED BACK.';
  END;

  START TRANSACTION;

  INSERT INTO JPN_PAYMENT (PAY_DATE, PAY_AMOUNT, PAY_METHOD, INV_ID)
  VALUES (P_PAY_DATE, P_PAY_AMOUNT, 'PAYPAL', P_INV_ID);

  SET NEW_PAY_ID = LAST_INSERT_ID();

  INSERT INTO JPN_PAYPAL (PAY_ID, PAYPAL_ID)
  VALUES (NEW_PAY_ID, P_PAYPAL_ID);

  COMMIT;
END;
//

DELIMITER ;



--  CUSTOMER
DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_USER_CUSTOMER (
  IN P_U_FNAME         VARCHAR(20),
  IN P_U_LNAME         VARCHAR(20),
  IN P_U_PHONE         VARCHAR(10),
  IN P_U_EMAIL         VARCHAR(40),
  IN P_U_PWD	       VARCHAR(255),
  IN P_CUST_UID_TYPE   VARCHAR(15),
  IN P_CUST_UID_NO     VARCHAR(20)
)
BEGIN
  DECLARE NEW_U_ID      BIGINT;
  DECLARE EXIST_COUNT   INT DEFAULT 0;
  DECLARE V_ROLE_ID     BIGINT;
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'INSERT FAILED IN CUSTOMER FLOW. TRANSACTION ROLLED BACK.';
  END;

  SELECT COUNT(*) INTO EXIST_COUNT
  FROM JPN_USER
  WHERE U_EMAIL = P_U_EMAIL;

  IF EXIST_COUNT > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'USER WITH THIS EMAIL ALREADY EXISTS.';
  END IF;

  START TRANSACTION;

      INSERT INTO JPN_USER (U_FNAME, U_LNAME, U_PHONE, U_EMAIL, U_PWD_HASH)
      VALUES (P_U_FNAME, P_U_LNAME, P_U_PHONE, P_U_EMAIL, UNHEX(SHA2(P_U_PWD, 256)));

      SET NEW_U_ID = LAST_INSERT_ID();

      INSERT INTO JPN_CUSTOMER (CUST_ID, CUST_UID_TYPE, CUST_UID_NO)
      VALUES (NEW_U_ID, P_CUST_UID_TYPE, P_CUST_UID_NO);

      SELECT ROLE_ID INTO V_ROLE_ID
      FROM JPN_ROLE
      WHERE ROLE_NAME = 'CUSTOMER';

      IF V_ROLE_ID IS NULL THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'ROLE ''CUSTOMER'' NOT DEFINED.';
      END IF;

      INSERT INTO JPN_USER_ROLE (U_ID, ROLE_ID)
      VALUES (NEW_U_ID, V_ROLE_ID);

  COMMIT;
END;
//
DELIMITER ;



-- AUTHOR
DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_USER_AUTHOR (
  IN P_U_FNAME     VARCHAR(20),
  IN P_U_LNAME     VARCHAR(20),
  IN P_U_PHONE     VARCHAR(10),
  IN P_U_EMAIL     VARCHAR(40),
  IN P_U_PWD	   VARCHAR(255),
  IN P_A_STREET    VARCHAR(20),
  IN P_A_CITY      VARCHAR(20),
  IN P_A_STATE     VARCHAR(2),
  IN P_A_COUNTRY   VARCHAR(30),
  IN P_A_ZIPCODE   VARCHAR(5)
)
BEGIN
  DECLARE NEW_U_ID      BIGINT;
  DECLARE EXIST_COUNT   INT DEFAULT 0;
  DECLARE V_ROLE_ID     BIGINT;
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'INSERT FAILED IN AUTHOR FLOW. TRANSACTION ROLLED BACK.';
  END;

  SELECT COUNT(*) INTO EXIST_COUNT
  FROM JPN_USER
  WHERE U_EMAIL = P_U_EMAIL;

  IF EXIST_COUNT > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'USER WITH THIS EMAIL ALREADY EXISTS.';
  END IF;

  START TRANSACTION;

      INSERT INTO JPN_USER (U_FNAME, U_LNAME, U_PHONE, U_EMAIL, U_PWD_HASH)
      VALUES (P_U_FNAME, P_U_LNAME, P_U_PHONE, P_U_EMAIL, UNHEX(SHA2(P_U_PWD, 256)));

      SET NEW_U_ID = LAST_INSERT_ID();

      INSERT INTO JPN_AUTHOR
            (A_ID,  A_STREET,  A_CITY,  A_STATE,  A_COUNTRY,  A_ZIPCODE)
      VALUES (NEW_U_ID, P_A_STREET, P_A_CITY, P_A_STATE, P_A_COUNTRY, P_A_ZIPCODE);

      SELECT ROLE_ID INTO V_ROLE_ID
      FROM JPN_ROLE
      WHERE ROLE_NAME = 'AUTHOR';

      IF V_ROLE_ID IS NULL THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'ROLE ''AUTHOR'' NOT DEFINED.';
      END IF;

      INSERT INTO JPN_USER_ROLE (U_ID, ROLE_ID)
      VALUES (NEW_U_ID, V_ROLE_ID);

  COMMIT;
END;
//
DELIMITER ;




--  EMPLOYEE
DELIMITER //

CREATE PROCEDURE SP_INSERT_JPN_USER_EMPLOYEE (
  IN P_U_FNAME      VARCHAR(20),
  IN P_U_LNAME      VARCHAR(20),
  IN P_U_PHONE      VARCHAR(10),
  IN P_U_EMAIL      VARCHAR(40),
  IN P_U_PWD  		VARCHAR(255),
  IN P_E_HIREDATE   DATE
)
BEGIN
  DECLARE NEW_U_ID          BIGINT;
  DECLARE EXIST_COUNT       INT DEFAULT 0;
  DECLARE HIREDATE_INTERNAL DATE;
  DECLARE V_ROLE_ID         BIGINT;
  
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'INSERT FAILED IN EMPLOYEE FLOW. TRANSACTION ROLLED BACK.';
  END;

  SELECT COUNT(*) INTO EXIST_COUNT
  FROM JPN_USER
  WHERE U_EMAIL = P_U_EMAIL;

  IF EXIST_COUNT > 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'USER WITH THIS EMAIL ALREADY EXISTS.';
  END IF;

  SET HIREDATE_INTERNAL = IFNULL(P_E_HIREDATE, CURRENT_DATE);

  START TRANSACTION;

      INSERT INTO JPN_USER (U_FNAME, U_LNAME, U_PHONE, U_EMAIL, U_PWD_HASH)
      VALUES (P_U_FNAME, P_U_LNAME, P_U_PHONE, P_U_EMAIL, UNHEX(SHA2(P_U_PWD, 256)));

      SET NEW_U_ID = LAST_INSERT_ID();

      INSERT INTO JPN_EMPLOYEE (E_ID, E_HIREDATE)
      VALUES (NEW_U_ID, HIREDATE_INTERNAL);

      SELECT ROLE_ID INTO V_ROLE_ID
      FROM JPN_ROLE
      WHERE ROLE_NAME = 'EMPLOYEE';

      IF V_ROLE_ID IS NULL THEN
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 'ROLE ''EMPLOYEE'' NOT DEFINED.';
      END IF;

      INSERT INTO JPN_USER_ROLE (U_ID, ROLE_ID)
      VALUES (NEW_U_ID, V_ROLE_ID);

  COMMIT;
END;
//
DELIMITER ;
